version: '3'

services:
  dbchef:
    container_name: dbchef
    image: "postgres"
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - easychefnet
    environment:
      POSTGRES_DB: chefdb
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      restart: unless-stopped

  dbrecipe:
    container_name: dbrecipe
    image: "postgres"
    ports:
      - "5433:5432"
    volumes:
      - db-recipes-data:/var/lib/postgresql/data
    networks:
      - easychefnet
    environment:
      POSTGRES_DB: recipedb
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      restart: unless-stopped

  chefservice:
    build: EasyChef4 #indica la cartella dove si trova il dockerfile di questo servizio
    image: chefservice
    container_name: chefservice
    ports:
      - "8080:8080"
    depends_on:
      - dbchef
    networks:
      - easychefnet
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://dbchef:5432/chefdb
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      restart: unless-stopped

volumes:
  db-data:
  db-recipes-data:
networks:
  easychefnet:
    driver: bridge


# Comandi da lanciare in ordine per creare i container
# docker-compose build
# docker-compose up

# Ordine per avere sempre container aggiornati:
# 1. Modifico le classi java secondo il bisogno

# 2. Faccio la build del progetto Java ed ottengo il file .jar nella cartella \target usando:
      # Maven > Lifecycle > Clean
      # Maven > Lifecycle > Package
        # ### Nota ###
        # Per fare la build del progetto Java Maven userà il file application.properties
        # con dentro il riferimento al db con localhost, ma quando poi creeremo il container nel docker-compose.yml gli passeremo i parametri
        # SPRING_DATASOURCE_URL con il VERO riferimento al Database che verrà poi sovrascritto quando verrà lanciato il container.

# 3. Lancio i comandi (dove si trova il docker-compose ed il Dockerfile che devono stare insieme):
      # docker-compose build (tutte le volte che modifico il Dockerfile e il jar devo fare la build)
      # docker-compose up (se ho già fatto la build posso lanciare il singolo container da qui)

